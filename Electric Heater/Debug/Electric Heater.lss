
Electric Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000e88  00000f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  00000f46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038fd  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140b  00000000  00000000  00004b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001667  00000000  00000000  00005f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000075f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001323  00000000  00000000  00007a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c7  00000000  00000000  00008dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00009e72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
  8a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Eeprom_Init>:
#include "Twi.h"

void Eeprom_Init(void)
{
    /* just initialize the I2C(TWI) module inside the MC */
    Twi_Init(&gStrTwi_Configuration);
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 52 04 	call	0x8a4	; 0x8a4 <Twi_Init>
  9a:	08 95       	ret

0000009c <Eeprom_WriteByte>:
}

Eeprom_StatusType Eeprom_WriteByte(uint8 u8Addr, uint8 u8Data)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	c8 2f       	mov	r28, r24
  a2:	d6 2f       	mov	r29, r22
    /* Send the Start Bit */
    Twi_Start();
  a4:	0e 94 10 05 	call	0xa20	; 0xa20 <Twi_Start>
    if (Twi_StatusGet() != TW_START)
  a8:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	c9 f4       	brne	.+50     	; 0xe2 <Eeprom_WriteByte+0x46>
        return EEPROM_E_NOK;
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    Twi_Write((uint8)(EEPROM_ADDRESS | (EEPROM_WRITE)));
  b0:	82 ea       	ldi	r24, 0xA2	; 162
  b2:	0e 94 19 05 	call	0xa32	; 0xa32 <Twi_Write>
    if (Twi_StatusGet() != TW_MT_SLA_W_ACK)
  b6:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
  ba:	88 31       	cpi	r24, 0x18	; 24
  bc:	a1 f4       	brne	.+40     	; 0xe6 <Eeprom_WriteByte+0x4a>
    {
        return EEPROM_E_NOK;
    }

    /* Send the required memory location address */
    Twi_Write((uint8)(u8Addr));
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 19 05 	call	0xa32	; 0xa32 <Twi_Write>
    if (Twi_StatusGet() != TW_MT_DATA_ACK)
  c4:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
  c8:	88 32       	cpi	r24, 0x28	; 40
  ca:	79 f4       	brne	.+30     	; 0xea <Eeprom_WriteByte+0x4e>
    {
        return EEPROM_E_NOK;
    }

    /* write byte to eeprom */
    Twi_Write(u8Data);
  cc:	8d 2f       	mov	r24, r29
  ce:	0e 94 19 05 	call	0xa32	; 0xa32 <Twi_Write>
    if (Twi_StatusGet() != TW_MT_DATA_ACK)
  d2:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
  d6:	88 32       	cpi	r24, 0x28	; 40
  d8:	51 f4       	brne	.+20     	; 0xee <Eeprom_WriteByte+0x52>
    {
        return EEPROM_E_NOK;
    }

    /* Send the Stop Bit */
    Twi_Stop();
  da:	0e 94 16 05 	call	0xa2c	; 0xa2c <Twi_Stop>

    return EEPROM_E_OK;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <Eeprom_WriteByte+0x54>
{
    /* Send the Start Bit */
    Twi_Start();
    if (Twi_StatusGet() != TW_START)
    {
        return EEPROM_E_NOK;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <Eeprom_WriteByte+0x54>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    Twi_Write((uint8)(EEPROM_ADDRESS | (EEPROM_WRITE)));
    if (Twi_StatusGet() != TW_MT_SLA_W_ACK)
    {
        return EEPROM_E_NOK;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <Eeprom_WriteByte+0x54>

    /* Send the required memory location address */
    Twi_Write((uint8)(u8Addr));
    if (Twi_StatusGet() != TW_MT_DATA_ACK)
    {
        return EEPROM_E_NOK;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <Eeprom_WriteByte+0x54>

    /* write byte to eeprom */
    Twi_Write(u8Data);
    if (Twi_StatusGet() != TW_MT_DATA_ACK)
    {
        return EEPROM_E_NOK;
  ee:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    Twi_Stop();

    return EEPROM_E_OK;
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <Eeprom_ReadByte>:

Eeprom_StatusType Eeprom_ReadByte(uint8 u8Addr, uint8 *u8Data)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
  fe:	8b 01       	movw	r16, r22
    /* Send the Start Bit */
    Twi_Start();
 100:	0e 94 10 05 	call	0xa20	; 0xa20 <Twi_Start>
    if (Twi_StatusGet() != TW_START)
 104:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	39 f5       	brne	.+78     	; 0x15a <Eeprom_ReadByte+0x64>
        return EEPROM_E_NOK;
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    Twi_Write((uint8)(EEPROM_ADDRESS | (EEPROM_WRITE)));
 10c:	82 ea       	ldi	r24, 0xA2	; 162
 10e:	0e 94 19 05 	call	0xa32	; 0xa32 <Twi_Write>
    if (Twi_StatusGet() != TW_MT_SLA_W_ACK)
 112:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
 116:	88 31       	cpi	r24, 0x18	; 24
 118:	11 f5       	brne	.+68     	; 0x15e <Eeprom_ReadByte+0x68>
    {
        return EEPROM_E_NOK;
    }
	
    /* Send the required memory location address */
    Twi_Write((uint8)(u8Addr));
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 19 05 	call	0xa32	; 0xa32 <Twi_Write>
    if (Twi_StatusGet() != TW_MT_DATA_ACK)
 120:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
 124:	88 32       	cpi	r24, 0x28	; 40
 126:	e9 f4       	brne	.+58     	; 0x162 <Eeprom_ReadByte+0x6c>
    {
        return EEPROM_E_NOK;
    }

    /* Send the Repeated Start Bit */
    Twi_Start();
 128:	0e 94 10 05 	call	0xa20	; 0xa20 <Twi_Start>
    if (Twi_StatusGet() != TW_REP_START)
 12c:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
 130:	80 31       	cpi	r24, 0x10	; 16
 132:	c9 f4       	brne	.+50     	; 0x166 <Eeprom_ReadByte+0x70>
        return EEPROM_E_NOK;
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    Twi_Write((uint8)(EEPROM_ADDRESS | (EEPROM_READ)));
 134:	83 ea       	ldi	r24, 0xA3	; 163
 136:	0e 94 19 05 	call	0xa32	; 0xa32 <Twi_Write>
    if (Twi_StatusGet() != TW_MT_SLA_R_ACK)
 13a:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
 13e:	80 34       	cpi	r24, 0x40	; 64
 140:	a1 f4       	brne	.+40     	; 0x16a <Eeprom_ReadByte+0x74>
    {
        return EEPROM_E_NOK;
    }

    /* Read Byte from Memory without send ACK */
    *u8Data = Twi_ReadWithNACK();
 142:	0e 94 20 05 	call	0xa40	; 0xa40 <Twi_ReadWithNACK>
 146:	f8 01       	movw	r30, r16
 148:	80 83       	st	Z, r24
    if (Twi_StatusGet() != TW_MR_DATA_NACK)
 14a:	0e 94 27 05 	call	0xa4e	; 0xa4e <Twi_StatusGet>
 14e:	88 35       	cpi	r24, 0x58	; 88
 150:	71 f4       	brne	.+28     	; 0x16e <Eeprom_ReadByte+0x78>
    {
        return EEPROM_E_NOK;
    }

    /* Send the Stop Bit */
    Twi_Stop();
 152:	0e 94 16 05 	call	0xa2c	; 0xa2c <Twi_Stop>
    return EEPROM_E_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0b c0       	rjmp	.+22     	; 0x170 <Eeprom_ReadByte+0x7a>
{
    /* Send the Start Bit */
    Twi_Start();
    if (Twi_StatusGet() != TW_START)
    {
        return EEPROM_E_NOK;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	09 c0       	rjmp	.+18     	; 0x170 <Eeprom_ReadByte+0x7a>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    Twi_Write((uint8)(EEPROM_ADDRESS | (EEPROM_WRITE)));
    if (Twi_StatusGet() != TW_MT_SLA_W_ACK)
    {
        return EEPROM_E_NOK;
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	07 c0       	rjmp	.+14     	; 0x170 <Eeprom_ReadByte+0x7a>
	
    /* Send the required memory location address */
    Twi_Write((uint8)(u8Addr));
    if (Twi_StatusGet() != TW_MT_DATA_ACK)
    {
        return EEPROM_E_NOK;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	05 c0       	rjmp	.+10     	; 0x170 <Eeprom_ReadByte+0x7a>

    /* Send the Repeated Start Bit */
    Twi_Start();
    if (Twi_StatusGet() != TW_REP_START)
    {
        return EEPROM_E_NOK;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	03 c0       	rjmp	.+6      	; 0x170 <Eeprom_ReadByte+0x7a>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    Twi_Write((uint8)(EEPROM_ADDRESS | (EEPROM_READ)));
    if (Twi_StatusGet() != TW_MT_SLA_R_ACK)
    {
        return EEPROM_E_NOK;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <Eeprom_ReadByte+0x7a>

    /* Read Byte from Memory without send ACK */
    *u8Data = Twi_ReadWithNACK();
    if (Twi_StatusGet() != TW_MR_DATA_NACK)
    {
        return EEPROM_E_NOK;
 16e:	80 e0       	ldi	r24, 0x00	; 0
    }

    /* Send the Stop Bit */
    Twi_Stop();
    return EEPROM_E_OK;
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <Led_Init>:
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	0e 94 94 03 	call	0x728	; 0x728 <Dio_ChannelDirectionSet>
 17e:	08 95       	ret

00000180 <Led_StateSet>:
 180:	42 30       	cpi	r20, 0x02	; 2
 182:	19 f4       	brne	.+6      	; 0x18a <Led_StateSet+0xa>
 184:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Dio_ChannelToggle>
 188:	08 95       	ret
 18a:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 18e:	08 95       	ret

00000190 <SSD_Init>:
const uint8 gau8SSD_arr[10] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};

void SSD_Init(void)
{
	/* Make Seven Segment Enable Pins in OUTPUT Mode */
	Dio_ChannelDirectionSet(SSD_CTRL_DIR_REG, SSD1_EN ,DIO_OUTPUT);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	87 e3       	ldi	r24, 0x37	; 55
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 94 03 	call	0x728	; 0x728 <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(SSD_CTRL_DIR_REG, SSD2_EN ,DIO_OUTPUT);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	87 e3       	ldi	r24, 0x37	; 55
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 94 03 	call	0x728	; 0x728 <Dio_ChannelDirectionSet>
	
	/* Make Seven Segment Data Pins in OUTPUT Mode */
	*SSD_DATA_DIR_REG = 0xF0U;   /* 0b11110000 */
 1a8:	80 ef       	ldi	r24, 0xF0	; 240
 1aa:	8a bb       	out	0x1a, r24	; 26
 1ac:	08 95       	ret

000001ae <SSD_NumberDisplay>:
}

void SSD_NumberDisplay(SSD_LedsEnum_t Num, uint8 SSD_no)
{
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	/* Enable the SSD first */
	switch(SSD_no)
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	19 f0       	breq	.+6      	; 0x1bc <SSD_NumberDisplay+0xe>
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <SSD_NumberDisplay+0x28>
 1ba:	1a c0       	rjmp	.+52     	; 0x1f0 <SSD_NumberDisplay+0x42>
	{
		case SSD1_EN:
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD1_EN, DIO_HIGH);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD2_EN, DIO_LOW);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
			break;
 1d4:	19 c0       	rjmp	.+50     	; 0x208 <SSD_NumberDisplay+0x5a>
		case SSD2_EN:
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD2_EN, DIO_HIGH);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	88 e3       	ldi	r24, 0x38	; 56
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD1_EN, DIO_LOW);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	88 e3       	ldi	r24, 0x38	; 56
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
			break;
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <SSD_NumberDisplay+0x5a>
		default:
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD1_EN, DIO_LOW);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	88 e3       	ldi	r24, 0x38	; 56
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
			Dio_ChannelWrite(SSD_CTRL_OUT_REG, SSD2_EN, DIO_LOW);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	88 e3       	ldi	r24, 0x38	; 56
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
		break;
	}
	/* !Comment: This line zero the 4-bits of the data before setting the new value */
	*SSD_DATA_OUT_REG &= ~(0xF0U);
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	8b bb       	out	0x1b, r24	; 27
	/* Write the number to the Data pins */
    if(SSD_TYPE == SSD_COMMON_CATHODE)
	{
		*SSD_DATA_OUT_REG |= (Num & 0xF0U) ;
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	c0 7f       	andi	r28, 0xF0	; 240
 212:	c8 2b       	or	r28, r24
 214:	cb bb       	out	0x1b, r28	; 27
	}
	else
	{
		*SSD_DATA_OUT_REG |= (~Num & 0xF0U);
	}
}
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <SSD_NumSet>:
void SSD_NumSet(uint16 Number)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
	SSD_NumberDisplay(gau8SSD_arr[(Number%100)/10],SSD2_EN);
 220:	9c 01       	movw	r18, r24
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	36 95       	lsr	r19
 228:	27 95       	ror	r18
 22a:	ab e7       	ldi	r26, 0x7B	; 123
 22c:	b4 e1       	ldi	r27, 0x14	; 20
 22e:	0e 94 33 07 	call	0xe66	; 0xe66 <__umulhisi3>
 232:	9c 01       	movw	r18, r24
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	44 e6       	ldi	r20, 0x64	; 100
 23a:	42 9f       	mul	r20, r18
 23c:	c0 01       	movw	r24, r0
 23e:	43 9f       	mul	r20, r19
 240:	90 0d       	add	r25, r0
 242:	11 24       	eor	r1, r1
 244:	9e 01       	movw	r18, r28
 246:	28 1b       	sub	r18, r24
 248:	39 0b       	sbc	r19, r25
 24a:	ad ec       	ldi	r26, 0xCD	; 205
 24c:	bc ec       	ldi	r27, 0xCC	; 204
 24e:	0e 94 33 07 	call	0xe66	; 0xe66 <__umulhisi3>
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	fc 01       	movw	r30, r24
 260:	e0 5a       	subi	r30, 0xA0	; 160
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	80 81       	ld	r24, Z
 268:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SSD_NumberDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	8f e3       	ldi	r24, 0x3F	; 63
 26e:	9c e9       	ldi	r25, 0x9C	; 156
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <SSD_NumSet+0x56>
 274:	00 c0       	rjmp	.+0      	; 0x276 <SSD_NumSet+0x5c>
 276:	00 00       	nop
	_delay_ms(10);
	SSD_NumberDisplay(gau8SSD_arr[(Number%10)],SSD1_EN);
 278:	9e 01       	movw	r18, r28
 27a:	ad ec       	ldi	r26, 0xCD	; 205
 27c:	bc ec       	ldi	r27, 0xCC	; 204
 27e:	0e 94 33 07 	call	0xe66	; 0xe66 <__umulhisi3>
 282:	96 95       	lsr	r25
 284:	87 95       	ror	r24
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	9c 01       	movw	r18, r24
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	82 0f       	add	r24, r18
 2a2:	93 1f       	adc	r25, r19
 2a4:	9e 01       	movw	r18, r28
 2a6:	28 1b       	sub	r18, r24
 2a8:	39 0b       	sbc	r19, r25
 2aa:	f9 01       	movw	r30, r18
 2ac:	e0 5a       	subi	r30, 0xA0	; 160
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	80 81       	ld	r24, Z
 2b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SSD_NumberDisplay>
 2b8:	8f e3       	ldi	r24, 0x3F	; 63
 2ba:	9c e9       	ldi	r25, 0x9C	; 156
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <SSD_NumSet+0xa2>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <SSD_NumSet+0xa8>
 2c2:	00 00       	nop
	_delay_ms(10);

 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <Sw_init>:
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	0e 94 94 03 	call	0x728	; 0x728 <Dio_ChannelDirectionSet>
 2d0:	08 95       	ret

000002d2 <Sw_StateGet>:
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
 2da:	16 2f       	mov	r17, r22
 2dc:	0e 94 b2 03 	call	0x764	; 0x764 <Dio_ChannelRead>
 2e0:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <__data_end>
 2e4:	89 17       	cp	r24, r25
 2e6:	91 f0       	breq	.+36     	; 0x30c <Sw_StateGet+0x3a>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	89 ef       	ldi	r24, 0xF9	; 249
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <Sw_StateGet+0x1c>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Sw_StateGet+0x26>
 2f8:	00 00       	nop
 2fa:	61 2f       	mov	r22, r17
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 b2 03 	call	0x764	; 0x764 <Dio_ChannelRead>
 302:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	19 f4       	brne	.+6      	; 0x310 <Sw_StateGet+0x3e>
 30a:	03 c0       	rjmp	.+6      	; 0x312 <Sw_StateGet+0x40>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	01 c0       	rjmp	.+2      	; 0x312 <Sw_StateGet+0x40>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	08 95       	ret

0000031a <TempSensor_Init>:
 31a:	8a e6       	ldi	r24, 0x6A	; 106
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Adc_Init>
 322:	08 95       	ret

00000324 <Heater_Cooler_Init>:
			measurement+=TempSensor_ValueGet();
			_delay_ms(100); //100/
		}
		uint8 Temp_Read= (measurement/10);
		return Temp_Read;
	}
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	84 e3       	ldi	r24, 0x34	; 52
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 94 03 	call	0x728	; 0x728 <Dio_ChannelDirectionSet>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	64 e0       	ldi	r22, 0x04	; 4
 334:	84 e3       	ldi	r24, 0x34	; 52
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 94 03 	call	0x728	; 0x728 <Dio_ChannelDirectionSet>
 33c:	0e 94 c8 00 	call	0x190	; 0x190 <SSD_Init>
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	87 e3       	ldi	r24, 0x37	; 55
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 65 01 	call	0x2ca	; 0x2ca <Sw_init>
 34a:	66 e0       	ldi	r22, 0x06	; 6
 34c:	81 e3       	ldi	r24, 0x31	; 49
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 65 01 	call	0x2ca	; 0x2ca <Sw_init>
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	81 e3       	ldi	r24, 0x31	; 49
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 65 01 	call	0x2ca	; 0x2ca <Sw_init>
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	84 e3       	ldi	r24, 0x34	; 52
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 bc 00 	call	0x178	; 0x178 <Led_Init>
 368:	67 e0       	ldi	r22, 0x07	; 7
 36a:	84 e3       	ldi	r24, 0x34	; 52
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 bc 00 	call	0x178	; 0x178 <Led_Init>
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e3       	ldi	r24, 0x31	; 49
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 bc 00 	call	0x178	; 0x178 <Led_Init>
 37c:	0e 94 8d 01 	call	0x31a	; 0x31a <TempSensor_Init>
 380:	0e 94 49 00 	call	0x92	; 0x92 <Eeprom_Init>
 384:	08 95       	ret

00000386 <Heater_Mode>:
 386:	88 23       	and	r24, r24
 388:	99 f1       	breq	.+102    	; 0x3f0 <Heater_Mode+0x6a>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	e9 f5       	brne	.+122    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	63 e0       	ldi	r22, 0x03	; 3
 392:	85 e3       	ldi	r24, 0x35	; 53
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	64 e0       	ldi	r22, 0x04	; 4
 39e:	85 e3       	ldi	r24, 0x35	; 53
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	63 e0       	ldi	r22, 0x03	; 3
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	67 e0       	ldi	r22, 0x07	; 7
 3b6:	85 e3       	ldi	r24, 0x35	; 53
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	83 ed       	ldi	r24, 0xD3	; 211
 3c2:	90 e3       	ldi	r25, 0x30	; 48
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <Heater_Mode+0x3e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <Heater_Mode+0x48>
 3ce:	00 00       	nop
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	67 e0       	ldi	r22, 0x07	; 7
 3d4:	85 e3       	ldi	r24, 0x35	; 53
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	83 ec       	ldi	r24, 0xC3	; 195
 3e0:	99 e0       	ldi	r25, 0x09	; 9
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <Heater_Mode+0x5c>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <Heater_Mode+0x66>
 3ec:	00 00       	nop
 3ee:	08 95       	ret
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	63 e0       	ldi	r22, 0x03	; 3
 3f4:	85 e3       	ldi	r24, 0x35	; 53
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	85 e3       	ldi	r24, 0x35	; 53
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
 408:	08 95       	ret

0000040a <Cooler_Mode>:
 40a:	88 23       	and	r24, r24
 40c:	a9 f0       	breq	.+42     	; 0x438 <Cooler_Mode+0x2e>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	f9 f4       	brne	.+62     	; 0x450 <Cooler_Mode+0x46>
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	64 e0       	ldi	r22, 0x04	; 4
 416:	85 e3       	ldi	r24, 0x35	; 53
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	63 e0       	ldi	r22, 0x03	; 3
 422:	85 e3       	ldi	r24, 0x35	; 53
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	82 e3       	ldi	r24, 0x32	; 50
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
 436:	08 95       	ret
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	64 e0       	ldi	r22, 0x04	; 4
 43c:	85 e3       	ldi	r24, 0x35	; 53
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 c7 03 	call	0x78e	; 0x78e <Dio_ChannelWrite>
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	82 e3       	ldi	r24, 0x32	; 50
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
 450:	08 95       	ret

00000452 <SSD_Blink>:
	
	void SSD_Blink(uint8 Number)
	{
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	c8 2f       	mov	r28, r24
		SSD_NumberDisplay(gau8SSD_arr[(Number%100)/10],SSD2_EN);
 458:	89 e2       	ldi	r24, 0x29	; 41
 45a:	c8 9f       	mul	r28, r24
 45c:	81 2d       	mov	r24, r1
 45e:	11 24       	eor	r1, r1
 460:	82 95       	swap	r24
 462:	8f 70       	andi	r24, 0x0F	; 15
 464:	ec 2f       	mov	r30, r28
 466:	94 e6       	ldi	r25, 0x64	; 100
 468:	89 9f       	mul	r24, r25
 46a:	e0 19       	sub	r30, r0
 46c:	11 24       	eor	r1, r1
 46e:	dd ec       	ldi	r29, 0xCD	; 205
 470:	ed 9f       	mul	r30, r29
 472:	e1 2d       	mov	r30, r1
 474:	11 24       	eor	r1, r1
 476:	e6 95       	lsr	r30
 478:	e6 95       	lsr	r30
 47a:	e6 95       	lsr	r30
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e0 5a       	subi	r30, 0xA0	; 160
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	62 e0       	ldi	r22, 0x02	; 2
 484:	80 81       	ld	r24, Z
 486:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SSD_NumberDisplay>
 48a:	8f e3       	ldi	r24, 0x3F	; 63
 48c:	9c e9       	ldi	r25, 0x9C	; 156
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <SSD_Blink+0x3c>
 492:	00 c0       	rjmp	.+0      	; 0x494 <SSD_Blink+0x42>
 494:	00 00       	nop
		_delay_ms(10);
		SSD_NumberDisplay(gau8SSD_arr[(Number%10)],SSD1_EN);
 496:	cd 9f       	mul	r28, r29
 498:	d1 2d       	mov	r29, r1
 49a:	11 24       	eor	r1, r1
 49c:	d6 95       	lsr	r29
 49e:	d6 95       	lsr	r29
 4a0:	d6 95       	lsr	r29
 4a2:	dd 0f       	add	r29, r29
 4a4:	8d 2f       	mov	r24, r29
 4a6:	88 0f       	add	r24, r24
 4a8:	88 0f       	add	r24, r24
 4aa:	d8 0f       	add	r29, r24
 4ac:	cd 1b       	sub	r28, r29
 4ae:	ec 2f       	mov	r30, r28
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e0 5a       	subi	r30, 0xA0	; 160
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	c0 81       	ld	r28, Z
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	8c 2f       	mov	r24, r28
 4bc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SSD_NumberDisplay>
 4c0:	8f e3       	ldi	r24, 0x3F	; 63
 4c2:	9c e9       	ldi	r25, 0x9C	; 156
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <SSD_Blink+0x72>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <SSD_Blink+0x78>
 4ca:	00 00       	nop
		_delay_ms(10);
		SSD_NumberDisplay(gau8SSD_arr[(Number%10)],3);
 4cc:	63 e0       	ldi	r22, 0x03	; 3
 4ce:	8c 2f       	mov	r24, r28
 4d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SSD_NumberDisplay>
 4d4:	8f e3       	ldi	r24, 0x3F	; 63
 4d6:	9c e9       	ldi	r25, 0x9C	; 156
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <SSD_Blink+0x86>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <SSD_Blink+0x8c>
 4de:	00 00       	nop
		_delay_ms(10);
	}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <Set_mode>:
		default:
		break;
	}
}
void Set_mode(void)
{
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
	uint16 ONE_SECOND=244;
	Gpt_Init(&gaStrGpt_Configuration[GPT_TIMER0]);
 4ec:	82 e7       	ldi	r24, 0x72	; 114
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Gpt_Init>
		break;
	}
}
void Set_mode(void)
{
	uint16 ONE_SECOND=244;
 4f4:	04 ef       	ldi	r16, 0xF4	; 244
 4f6:	10 e0       	ldi	r17, 0x00	; 0
	/*uint8 u8_1_seconds_counter=0;
	uint8 one_seconds=244U;  like in main.c file
	uint16 u16_5_seconds_counter=0;
	uint16 five_seconds=1220U;  244x5 
	setting 1 second timer for blinking and 5 seconds for exit*/
	while (gu8GptCounter < FIVE_SECOND_GPT_OVF_NUM)
 4f8:	48 c0       	rjmp	.+144    	; 0x58a <Set_mode+0xa4>
	{
	/*u8_1_seconds_counter++;		
	u16_5_seconds_counter++;*/	
	 /*to save temp change and get temp from eeprom*/
	 
	Eeprom_ReadByte(0x00, &u8LocalRecData);
 4fa:	6d e8       	ldi	r22, 0x8D	; 141
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 7b 00 	call	0xf6	; 0xf6 <Eeprom_ReadByte>
	SSD_NumSet(u8LocalRecData);
 504:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8LocalRecData>
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 0d 01 	call	0x21a	; 0x21a <SSD_NumSet>
	Sw_StateEnum_t  Sw_State_1 = Sw_StateGet(SW1_2_INP_REG,SW1);
 50e:	66 e0       	ldi	r22, 0x06	; 6
 510:	80 e3       	ldi	r24, 0x30	; 48
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Sw_StateGet>
 518:	c8 2f       	mov	r28, r24
	Sw_StateEnum_t  Sw_State_2 = Sw_StateGet(SW1_2_INP_REG,SW2);
 51a:	62 e0       	ldi	r22, 0x02	; 2
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Sw_StateGet>
	if(Sw_State_1)/*if switch 1 is pressed increase temp and save it and displays it and resets 5 seconds counter*/
 524:	cc 23       	and	r28, r28
 526:	79 f0       	breq	.+30     	; 0x546 <Set_mode+0x60>
	{
		if(u8LocalRecData<=70)
 528:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8LocalRecData>
 52c:	87 34       	cpi	r24, 0x47	; 71
 52e:	d8 f4       	brcc	.+54     	; 0x566 <Set_mode+0x80>
		{
		u8LocalRecData+=5;
 530:	8b 5f       	subi	r24, 0xFB	; 251
 532:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8LocalRecData>
		SSD_NumSet(u8LocalRecData);
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 0d 01 	call	0x21a	; 0x21a <SSD_NumSet>
		gu8GptCounter=0;
 53c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <gu8GptCounter+0x1>
 540:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <gu8GptCounter>
 544:	10 c0       	rjmp	.+32     	; 0x566 <Set_mode+0x80>
		}
	}
	else if (Sw_State_2)
 546:	88 23       	and	r24, r24
 548:	71 f0       	breq	.+28     	; 0x566 <Set_mode+0x80>
	{
		if(u8LocalRecData>=40)
 54a:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8LocalRecData>
 54e:	88 32       	cpi	r24, 0x28	; 40
 550:	50 f0       	brcs	.+20     	; 0x566 <Set_mode+0x80>
		{
			
		u8LocalRecData-=5;
 552:	85 50       	subi	r24, 0x05	; 5
 554:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8LocalRecData>
		SSD_NumSet(u8LocalRecData);
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 0d 01 	call	0x21a	; 0x21a <SSD_NumSet>
		gu8GptCounter=0;
 55e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <gu8GptCounter+0x1>
 562:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <gu8GptCounter>
		}
	}
	if (gu8GptCounter==ONE_SECOND) /*induces a delay for blinking*/ 
 566:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <gu8GptCounter>
 56a:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <gu8GptCounter+0x1>
 56e:	08 17       	cp	r16, r24
 570:	19 07       	cpc	r17, r25
 572:	59 f4       	brne	.+22     	; 0x58a <Set_mode+0xa4>
	{
		Eeprom_ReadByte(0x00, &u8LocalRecData);
 574:	6d e8       	ldi	r22, 0x8D	; 141
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 7b 00 	call	0xf6	; 0xf6 <Eeprom_ReadByte>
		SSD_Blink(u8LocalRecData);
 57e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8LocalRecData>
 582:	0e 94 29 02 	call	0x452	; 0x452 <SSD_Blink>
		ONE_SECOND+=244;
 586:	0c 50       	subi	r16, 0x0C	; 12
 588:	1f 4f       	sbci	r17, 0xFF	; 255
	/*uint8 u8_1_seconds_counter=0;
	uint8 one_seconds=244U;  like in main.c file
	uint16 u16_5_seconds_counter=0;
	uint16 five_seconds=1220U;  244x5 
	setting 1 second timer for blinking and 5 seconds for exit*/
	while (gu8GptCounter < FIVE_SECOND_GPT_OVF_NUM)
 58a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <gu8GptCounter>
 58e:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <gu8GptCounter+0x1>
 592:	84 3c       	cpi	r24, 0xC4	; 196
 594:	94 40       	sbci	r25, 0x04	; 4
 596:	08 f4       	brcc	.+2      	; 0x59a <Set_mode+0xb4>
 598:	b0 cf       	rjmp	.-160    	; 0x4fa <Set_mode+0x14>
		SSD_Blink(u8LocalRecData);
		ONE_SECOND+=244;
	}
		
	}
	Eeprom_WriteByte(0x00, u8LocalRecData);
 59a:	60 91 8d 00 	lds	r22, 0x008D	; 0x80008d <u8LocalRecData>
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 4e 00 	call	0x9c	; 0x9c <Eeprom_WriteByte>
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	93 ed       	ldi	r25, 0xD3	; 211
 5a8:	20 e3       	ldi	r18, 0x30	; 48
 5aa:	81 50       	subi	r24, 0x01	; 1
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	20 40       	sbci	r18, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <Set_mode+0xc4>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <Set_mode+0xce>
 5b4:	00 00       	nop
	_delay_ms(1000);// You must allow sufficient delay for the EEPROM to complete its write cycle
	gu8GptCounter=0;
 5b6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <gu8GptCounter+0x1>
 5ba:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <gu8GptCounter>
}
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <__vector_11>:
#include "Ext_Interrupts.h"

volatile uint16 gu8GptCounter=0;

ISR(TIMER0_OVF_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
	gu8GptCounter++;
 5d4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <gu8GptCounter>
 5d8:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <gu8GptCounter+0x1>
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <gu8GptCounter+0x1>
 5e2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <gu8GptCounter>
}
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <main>:


int main(void)
{
	uint8 u8TempReading;
	Heater_Cooler_Init();
 5f4:	0e 94 92 01 	call	0x324	; 0x324 <Heater_Cooler_Init>

	Global_Interrupts_StateSet(GLOBAL_INT_ENABLE);
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Global_Interrupts_StateSet>
	u8LocalRecData = 50 ;
 5fe:	82 e3       	ldi	r24, 0x32	; 50
 600:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8LocalRecData>
	Eeprom_WriteByte(0x00,u8LocalRecData);
 604:	62 e3       	ldi	r22, 0x32	; 50
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 4e 00 	call	0x9c	; 0x9c <Eeprom_WriteByte>
 60c:	2f ef       	ldi	r18, 0xFF	; 255
 60e:	83 ed       	ldi	r24, 0xD3	; 211
 610:	90 e3       	ldi	r25, 0x30	; 48
 612:	21 50       	subi	r18, 0x01	; 1
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	90 40       	sbci	r25, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0x1e>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x28>
 61c:	00 00       	nop

    /* Replace with your application code */
    while (1) 
    { 
		
		if(Sw_StateGet(SW0_INP_REG,SW0))
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	86 e3       	ldi	r24, 0x36	; 54
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Sw_StateGet>
 628:	88 23       	and	r24, r24
 62a:	31 f0       	breq	.+12     	; 0x638 <main+0x44>
		{
			Led_StateSet(LED0_1_OUT_REG,LED0,LED_TOGGLE);
 62c:	42 e0       	ldi	r20, 0x02	; 2
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	85 e3       	ldi	r24, 0x35	; 53
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 c0 00 	call	0x180	; 0x180 <Led_StateSet>
		}
		//_delay_ms(100);
		
		if(Dio_ChannelRead(LED0_1_OUT_REG,LED0)) /*on and off*/
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	85 e3       	ldi	r24, 0x35	; 53
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 b2 03 	call	0x764	; 0x764 <Dio_ChannelRead>
 642:	88 23       	and	r24, r24
 644:	69 f1       	breq	.+90     	; 0x6a0 <main+0xac>
		{
			if(Sw_StateGet(SW1_2_INP_REG,SW1)||Sw_StateGet(SW1_2_INP_REG,SW2))
 646:	66 e0       	ldi	r22, 0x06	; 6
 648:	80 e3       	ldi	r24, 0x30	; 48
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Sw_StateGet>
 650:	81 11       	cpse	r24, r1
 652:	06 c0       	rjmp	.+12     	; 0x660 <main+0x6c>
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	80 e3       	ldi	r24, 0x30	; 48
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Sw_StateGet>
 65e:	81 11       	cpse	r24, r1
			{
				Set_mode();
 660:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Set_mode>
			}
			
			//u8TempReading =  TempSensor_ValueGet_100ms();
			SSD_NumSet(u8TempReading);
 664:	81 e4       	ldi	r24, 0x41	; 65
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 0d 01 	call	0x21a	; 0x21a <SSD_NumSet>
			
			Eeprom_ReadByte(0x00, &u8LocalRecData);
 66c:	6d e8       	ldi	r22, 0x8D	; 141
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 7b 00 	call	0xf6	; 0xf6 <Eeprom_ReadByte>
			if (u8TempReading<(u8LocalRecData-5))
 676:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8LocalRecData>
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	05 97       	sbiw	r24, 0x05	; 5
 67e:	82 34       	cpi	r24, 0x42	; 66
 680:	91 05       	cpc	r25, r1
 682:	1c f0       	brlt	.+6      	; 0x68a <main+0x96>
			{
				Heater_Mode(HEATER_ON);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 c3 01 	call	0x386	; 0x386 <Heater_Mode>
			}
			if (u8TempReading>(u8LocalRecData+5))
 68a:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8LocalRecData>
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	05 96       	adiw	r24, 0x05	; 5
 692:	81 34       	cpi	r24, 0x41	; 65
 694:	91 05       	cpc	r25, r1
 696:	1c f6       	brge	.-122    	; 0x61e <main+0x2a>
			{
				Cooler_Mode(COOLER_ON);
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	0e 94 05 02 	call	0x40a	; 0x40a <Cooler_Mode>
 69e:	bf cf       	rjmp	.-130    	; 0x61e <main+0x2a>
			}
				
		}
		else
		{
			Heater_Mode(HEATER_OFF);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	0e 94 c3 01 	call	0x386	; 0x386 <Heater_Mode>
			Cooler_Mode(COOLER_OFF);
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	0e 94 05 02 	call	0x40a	; 0x40a <Cooler_Mode>
			SSD_NumberDisplay(gau8SSD_arr[0],3);
 6ac:	63 e0       	ldi	r22, 0x03	; 3
 6ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SSD_NumberDisplay>
 6b6:	b3 cf       	rjmp	.-154    	; 0x61e <main+0x2a>

000006b8 <Adc_Init>:
 6b8:	fc 01       	movw	r30, r24
 6ba:	17 b8       	out	0x07, r1	; 7
 6bc:	16 b8       	out	0x06, r1	; 6
 6be:	80 b7       	in	r24, 0x30	; 48
 6c0:	8f 71       	andi	r24, 0x1F	; 31
 6c2:	80 bf       	out	0x30, r24	; 48
 6c4:	80 81       	ld	r24, Z
 6c6:	81 11       	cpse	r24, r1
 6c8:	2e c0       	rjmp	.+92     	; 0x726 <Adc_Init+0x6e>
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	88 23       	and	r24, r24
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <Adc_Init+0x1e>
 6d0:	82 30       	cpi	r24, 0x02	; 2
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <Adc_Init+0x2a>
 6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <Adc_Init+0x38>
 6d6:	86 b1       	in	r24, 0x06	; 6
 6d8:	80 62       	ori	r24, 0x20	; 32
 6da:	86 b9       	out	0x06, r24	; 6
 6dc:	80 b7       	in	r24, 0x30	; 48
 6de:	80 bf       	out	0x30, r24	; 48
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <Adc_Init+0x38>
 6e2:	86 b1       	in	r24, 0x06	; 6
 6e4:	80 62       	ori	r24, 0x20	; 32
 6e6:	86 b9       	out	0x06, r24	; 6
 6e8:	90 b7       	in	r25, 0x30	; 48
 6ea:	85 81       	ldd	r24, Z+5	; 0x05
 6ec:	89 2b       	or	r24, r25
 6ee:	80 bf       	out	0x30, r24	; 48
 6f0:	97 b1       	in	r25, 0x07	; 7
 6f2:	81 81       	ldd	r24, Z+1	; 0x01
 6f4:	89 2b       	or	r24, r25
 6f6:	87 b9       	out	0x07, r24	; 7
 6f8:	84 81       	ldd	r24, Z+4	; 0x04
 6fa:	88 23       	and	r24, r24
 6fc:	19 f0       	breq	.+6      	; 0x704 <Adc_Init+0x4c>
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	29 f0       	breq	.+10     	; 0x70c <Adc_Init+0x54>
 702:	08 c0       	rjmp	.+16     	; 0x714 <Adc_Init+0x5c>
 704:	87 b1       	in	r24, 0x07	; 7
 706:	80 62       	ori	r24, 0x20	; 32
 708:	87 b9       	out	0x07, r24	; 7
 70a:	04 c0       	rjmp	.+8      	; 0x714 <Adc_Init+0x5c>
 70c:	97 b1       	in	r25, 0x07	; 7
 70e:	86 81       	ldd	r24, Z+6	; 0x06
 710:	89 2b       	or	r24, r25
 712:	87 b9       	out	0x07, r24	; 7
 714:	96 b1       	in	r25, 0x06	; 6
 716:	23 81       	ldd	r18, Z+3	; 0x03
 718:	87 81       	ldd	r24, Z+7	; 0x07
 71a:	82 2b       	or	r24, r18
 71c:	89 2b       	or	r24, r25
 71e:	86 b9       	out	0x06, r24	; 6
 720:	86 b1       	in	r24, 0x06	; 6
 722:	80 68       	ori	r24, 0x80	; 128
 724:	86 b9       	out	0x06, r24	; 6
 726:	08 95       	ret

00000728 <Dio_ChannelDirectionSet>:
 728:	44 23       	and	r20, r20
 72a:	19 f0       	breq	.+6      	; 0x732 <Dio_ChannelDirectionSet+0xa>
 72c:	41 30       	cpi	r20, 0x01	; 1
 72e:	71 f0       	breq	.+28     	; 0x74c <Dio_ChannelDirectionSet+0x24>
 730:	08 95       	ret
 732:	fc 01       	movw	r30, r24
 734:	40 81       	ld	r20, Z
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <Dio_ChannelDirectionSet+0x18>
 73c:	22 0f       	add	r18, r18
 73e:	33 1f       	adc	r19, r19
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <Dio_ChannelDirectionSet+0x14>
 744:	20 95       	com	r18
 746:	24 23       	and	r18, r20
 748:	20 83       	st	Z, r18
 74a:	08 95       	ret
 74c:	fc 01       	movw	r30, r24
 74e:	40 81       	ld	r20, Z
 750:	21 e0       	ldi	r18, 0x01	; 1
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <Dio_ChannelDirectionSet+0x32>
 756:	22 0f       	add	r18, r18
 758:	33 1f       	adc	r19, r19
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <Dio_ChannelDirectionSet+0x2e>
 75e:	24 2b       	or	r18, r20
 760:	20 83       	st	Z, r18
 762:	08 95       	ret

00000764 <Dio_ChannelRead>:
 764:	fc 01       	movw	r30, r24
 766:	40 81       	ld	r20, Z
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	9c 01       	movw	r18, r24
 76e:	06 2e       	mov	r0, r22
 770:	02 c0       	rjmp	.+4      	; 0x776 <Dio_ChannelRead+0x12>
 772:	22 0f       	add	r18, r18
 774:	33 1f       	adc	r19, r19
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <Dio_ChannelRead+0xe>
 77a:	84 2f       	mov	r24, r20
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	82 23       	and	r24, r18
 780:	93 23       	and	r25, r19
 782:	02 c0       	rjmp	.+4      	; 0x788 <Dio_ChannelRead+0x24>
 784:	96 95       	lsr	r25
 786:	87 95       	ror	r24
 788:	6a 95       	dec	r22
 78a:	e2 f7       	brpl	.-8      	; 0x784 <Dio_ChannelRead+0x20>
 78c:	08 95       	ret

0000078e <Dio_ChannelWrite>:
 78e:	44 23       	and	r20, r20
 790:	19 f0       	breq	.+6      	; 0x798 <Dio_ChannelWrite+0xa>
 792:	41 30       	cpi	r20, 0x01	; 1
 794:	71 f0       	breq	.+28     	; 0x7b2 <Dio_ChannelWrite+0x24>
 796:	08 95       	ret
 798:	fc 01       	movw	r30, r24
 79a:	40 81       	ld	r20, Z
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <Dio_ChannelWrite+0x18>
 7a2:	22 0f       	add	r18, r18
 7a4:	33 1f       	adc	r19, r19
 7a6:	6a 95       	dec	r22
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <Dio_ChannelWrite+0x14>
 7aa:	20 95       	com	r18
 7ac:	24 23       	and	r18, r20
 7ae:	20 83       	st	Z, r18
 7b0:	08 95       	ret
 7b2:	fc 01       	movw	r30, r24
 7b4:	40 81       	ld	r20, Z
 7b6:	21 e0       	ldi	r18, 0x01	; 1
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <Dio_ChannelWrite+0x32>
 7bc:	22 0f       	add	r18, r18
 7be:	33 1f       	adc	r19, r19
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <Dio_ChannelWrite+0x2e>
 7c4:	24 2b       	or	r18, r20
 7c6:	20 83       	st	Z, r18
 7c8:	08 95       	ret

000007ca <Dio_ChannelToggle>:
 7ca:	fc 01       	movw	r30, r24
 7cc:	40 81       	ld	r20, Z
 7ce:	21 e0       	ldi	r18, 0x01	; 1
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <Dio_ChannelToggle+0xe>
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <Dio_ChannelToggle+0xa>
 7dc:	24 27       	eor	r18, r20
 7de:	20 83       	st	Z, r18
 7e0:	08 95       	ret

000007e2 <Global_Interrupts_StateSet>:
 7e2:	88 23       	and	r24, r24
 7e4:	19 f0       	breq	.+6      	; 0x7ec <Global_Interrupts_StateSet+0xa>
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	29 f0       	breq	.+10     	; 0x7f4 <Global_Interrupts_StateSet+0x12>
 7ea:	08 95       	ret
 7ec:	8f b7       	in	r24, 0x3f	; 63
 7ee:	8f 77       	andi	r24, 0x7F	; 127
 7f0:	8f bf       	out	0x3f, r24	; 63
 7f2:	08 95       	ret
 7f4:	8f b7       	in	r24, 0x3f	; 63
 7f6:	80 68       	ori	r24, 0x80	; 128
 7f8:	8f bf       	out	0x3f, r24	; 63
 7fa:	08 95       	ret

000007fc <Gpt_Init>:
 7fc:	fc 01       	movw	r30, r24
 7fe:	80 81       	ld	r24, Z
 800:	88 23       	and	r24, r24
 802:	19 f0       	breq	.+6      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	19 f1       	breq	.+70     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 808:	08 95       	ret
 80a:	13 be       	out	0x33, r1	; 51
 80c:	81 81       	ldd	r24, Z+1	; 0x01
 80e:	88 23       	and	r24, r24
 810:	19 f0       	breq	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	88 30       	cpi	r24, 0x08	; 8
 814:	41 f0       	breq	.+16     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 816:	15 c0       	rjmp	.+42     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	83 bf       	out	0x33, r24	; 51
 81c:	99 b7       	in	r25, 0x39	; 57
 81e:	83 81       	ldd	r24, Z+3	; 0x03
 820:	89 2b       	or	r24, r25
 822:	89 bf       	out	0x39, r24	; 57
 824:	0e c0       	rjmp	.+28     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 826:	83 b7       	in	r24, 0x33	; 51
 828:	88 60       	ori	r24, 0x08	; 8
 82a:	83 bf       	out	0x33, r24	; 51
 82c:	29 b7       	in	r18, 0x39	; 57
 82e:	93 81       	ldd	r25, Z+3	; 0x03
 830:	89 2f       	mov	r24, r25
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	82 2b       	or	r24, r18
 83a:	89 bf       	out	0x39, r24	; 57
 83c:	84 81       	ldd	r24, Z+4	; 0x04
 83e:	81 50       	subi	r24, 0x01	; 1
 840:	8c bf       	out	0x3c, r24	; 60
 842:	93 b7       	in	r25, 0x33	; 51
 844:	82 81       	ldd	r24, Z+2	; 0x02
 846:	89 2b       	or	r24, r25
 848:	83 bf       	out	0x33, r24	; 51
 84a:	12 be       	out	0x32, r1	; 50
 84c:	08 95       	ret
 84e:	1e bc       	out	0x2e, r1	; 46
 850:	1d bc       	out	0x2d, r1	; 45
 852:	1c bc       	out	0x2c, r1	; 44
 854:	81 81       	ldd	r24, Z+1	; 0x01
 856:	88 23       	and	r24, r24
 858:	19 f0       	breq	.+6      	; 0x860 <__stack+0x1>
 85a:	88 30       	cpi	r24, 0x08	; 8
 85c:	71 f0       	breq	.+28     	; 0x87a <__stack+0x1b>
 85e:	1d c0       	rjmp	.+58     	; 0x89a <__stack+0x3b>
 860:	8e b5       	in	r24, 0x2e	; 46
 862:	8e bd       	out	0x2e, r24	; 46
 864:	29 b7       	in	r18, 0x39	; 57
 866:	93 81       	ldd	r25, Z+3	; 0x03
 868:	89 2f       	mov	r24, r25
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	88 0f       	add	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	82 2b       	or	r24, r18
 876:	89 bf       	out	0x39, r24	; 57
 878:	10 c0       	rjmp	.+32     	; 0x89a <__stack+0x3b>
 87a:	8e b5       	in	r24, 0x2e	; 46
 87c:	88 60       	ori	r24, 0x08	; 8
 87e:	8e bd       	out	0x2e, r24	; 46
 880:	29 b7       	in	r18, 0x39	; 57
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	30 e1       	ldi	r19, 0x10	; 16
 886:	93 9f       	mul	r25, r19
 888:	c0 01       	movw	r24, r0
 88a:	11 24       	eor	r1, r1
 88c:	82 2b       	or	r24, r18
 88e:	89 bf       	out	0x39, r24	; 57
 890:	84 81       	ldd	r24, Z+4	; 0x04
 892:	95 81       	ldd	r25, Z+5	; 0x05
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	9b bd       	out	0x2b, r25	; 43
 898:	8a bd       	out	0x2a, r24	; 42
 89a:	9e b5       	in	r25, 0x2e	; 46
 89c:	82 81       	ldd	r24, Z+2	; 0x02
 89e:	89 2b       	or	r24, r25
 8a0:	8e bd       	out	0x2e, r24	; 46
 8a2:	08 95       	ret

000008a4 <Twi_Init>:
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	ec 01       	movw	r28, r24
 8aa:	16 be       	out	0x36, r1	; 54
 8ac:	12 b8       	out	0x02, r1	; 2
 8ae:	10 b8       	out	0x00, r1	; 0
 8b0:	11 b8       	out	0x01, r1	; 1
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	82 b9       	out	0x02, r24	; 2
 8b6:	88 81       	ld	r24, Y
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	19 f1       	breq	.+70     	; 0x902 <Twi_Init+0x5e>
 8bc:	30 f0       	brcs	.+12     	; 0x8ca <Twi_Init+0x26>
 8be:	82 30       	cpi	r24, 0x02	; 2
 8c0:	f1 f1       	breq	.+124    	; 0x93e <Twi_Init+0x9a>
 8c2:	83 30       	cpi	r24, 0x03	; 3
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <Twi_Init+0x24>
 8c6:	69 c0       	rjmp	.+210    	; 0x99a <Twi_Init+0xf6>
 8c8:	9d c0       	rjmp	.+314    	; 0xa04 <Twi_Init+0x160>
 8ca:	6a 81       	ldd	r22, Y+2	; 0x02
 8cc:	7b 81       	ldd	r23, Y+3	; 0x03
 8ce:	8c 81       	ldd	r24, Y+4	; 0x04
 8d0:	9d 81       	ldd	r25, Y+5	; 0x05
 8d2:	0e 94 38 06 	call	0xc70	; 0xc70 <__floatunsisf>
 8d6:	9b 01       	movw	r18, r22
 8d8:	ac 01       	movw	r20, r24
 8da:	0e 94 2b 05 	call	0xa56	; 0xa56 <__addsf3>
 8de:	9b 01       	movw	r18, r22
 8e0:	ac 01       	movw	r20, r24
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	74 e2       	ldi	r23, 0x24	; 36
 8e6:	84 e7       	ldi	r24, 0x74	; 116
 8e8:	9b e4       	ldi	r25, 0x4B	; 75
 8ea:	0e 94 97 05 	call	0xb2e	; 0xb2e <__divsf3>
 8ee:	20 e0       	ldi	r18, 0x00	; 0
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	51 e4       	ldi	r21, 0x41	; 65
 8f6:	0e 94 2a 05 	call	0xa54	; 0xa54 <__subsf3>
 8fa:	0e 94 09 06 	call	0xc12	; 0xc12 <__fixunssfsi>
 8fe:	60 b9       	out	0x00, r22	; 0
 900:	81 c0       	rjmp	.+258    	; 0xa04 <Twi_Init+0x160>
 902:	6a 81       	ldd	r22, Y+2	; 0x02
 904:	7b 81       	ldd	r23, Y+3	; 0x03
 906:	8c 81       	ldd	r24, Y+4	; 0x04
 908:	9d 81       	ldd	r25, Y+5	; 0x05
 90a:	0e 94 38 06 	call	0xc70	; 0xc70 <__floatunsisf>
 90e:	20 e0       	ldi	r18, 0x00	; 0
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	51 e4       	ldi	r21, 0x41	; 65
 916:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__mulsf3>
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	74 e2       	ldi	r23, 0x24	; 36
 922:	84 e7       	ldi	r24, 0x74	; 116
 924:	9b e4       	ldi	r25, 0x4B	; 75
 926:	0e 94 97 05 	call	0xb2e	; 0xb2e <__divsf3>
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	50 e4       	ldi	r21, 0x40	; 64
 932:	0e 94 2a 05 	call	0xa54	; 0xa54 <__subsf3>
 936:	0e 94 09 06 	call	0xc12	; 0xc12 <__fixunssfsi>
 93a:	60 b9       	out	0x00, r22	; 0
 93c:	63 c0       	rjmp	.+198    	; 0xa04 <Twi_Init+0x160>
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	9b 81       	ldd	r25, Y+3	; 0x03
 942:	ac 81       	ldd	r26, Y+4	; 0x04
 944:	bd 81       	ldd	r27, Y+5	; 0x05
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	aa 1f       	adc	r26, r26
 94c:	bb 1f       	adc	r27, r27
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	aa 1f       	adc	r26, r26
 954:	bb 1f       	adc	r27, r27
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	aa 1f       	adc	r26, r26
 95c:	bb 1f       	adc	r27, r27
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	aa 1f       	adc	r26, r26
 964:	bb 1f       	adc	r27, r27
 966:	bc 01       	movw	r22, r24
 968:	cd 01       	movw	r24, r26
 96a:	66 0f       	add	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	0e 94 38 06 	call	0xc70	; 0xc70 <__floatunsisf>
 976:	9b 01       	movw	r18, r22
 978:	ac 01       	movw	r20, r24
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	74 e2       	ldi	r23, 0x24	; 36
 97e:	84 e7       	ldi	r24, 0x74	; 116
 980:	9b e4       	ldi	r25, 0x4B	; 75
 982:	0e 94 97 05 	call	0xb2e	; 0xb2e <__divsf3>
 986:	20 e0       	ldi	r18, 0x00	; 0
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	40 e0       	ldi	r20, 0x00	; 0
 98c:	5f e3       	ldi	r21, 0x3F	; 63
 98e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__subsf3>
 992:	0e 94 09 06 	call	0xc12	; 0xc12 <__fixunssfsi>
 996:	60 b9       	out	0x00, r22	; 0
 998:	35 c0       	rjmp	.+106    	; 0xa04 <Twi_Init+0x160>
 99a:	8a 81       	ldd	r24, Y+2	; 0x02
 99c:	9b 81       	ldd	r25, Y+3	; 0x03
 99e:	ac 81       	ldd	r26, Y+4	; 0x04
 9a0:	bd 81       	ldd	r27, Y+5	; 0x05
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	aa 1f       	adc	r26, r26
 9a8:	bb 1f       	adc	r27, r27
 9aa:	88 0f       	add	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	aa 1f       	adc	r26, r26
 9b0:	bb 1f       	adc	r27, r27
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	aa 1f       	adc	r26, r26
 9b8:	bb 1f       	adc	r27, r27
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	aa 1f       	adc	r26, r26
 9c0:	bb 1f       	adc	r27, r27
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	aa 1f       	adc	r26, r26
 9c8:	bb 1f       	adc	r27, r27
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	aa 1f       	adc	r26, r26
 9d0:	bb 1f       	adc	r27, r27
 9d2:	bc 01       	movw	r22, r24
 9d4:	cd 01       	movw	r24, r26
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	0e 94 38 06 	call	0xc70	; 0xc70 <__floatunsisf>
 9e2:	9b 01       	movw	r18, r22
 9e4:	ac 01       	movw	r20, r24
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	74 e2       	ldi	r23, 0x24	; 36
 9ea:	84 e7       	ldi	r24, 0x74	; 116
 9ec:	9b e4       	ldi	r25, 0x4B	; 75
 9ee:	0e 94 97 05 	call	0xb2e	; 0xb2e <__divsf3>
 9f2:	20 e0       	ldi	r18, 0x00	; 0
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	40 e0       	ldi	r20, 0x00	; 0
 9f8:	5e e3       	ldi	r21, 0x3E	; 62
 9fa:	0e 94 2a 05 	call	0xa54	; 0xa54 <__subsf3>
 9fe:	0e 94 09 06 	call	0xc12	; 0xc12 <__fixunssfsi>
 a02:	60 b9       	out	0x00, r22	; 0
 a04:	91 b1       	in	r25, 0x01	; 1
 a06:	88 81       	ld	r24, Y
 a08:	89 2b       	or	r24, r25
 a0a:	81 b9       	out	0x01, r24	; 1
 a0c:	96 b7       	in	r25, 0x36	; 54
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
 a10:	89 2b       	or	r24, r25
 a12:	86 bf       	out	0x36, r24	; 54
 a14:	86 b7       	in	r24, 0x36	; 54
 a16:	84 60       	ori	r24, 0x04	; 4
 a18:	86 bf       	out	0x36, r24	; 54
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	08 95       	ret

00000a20 <Twi_Start>:
 a20:	84 ea       	ldi	r24, 0xA4	; 164
 a22:	86 bf       	out	0x36, r24	; 54
 a24:	06 b6       	in	r0, 0x36	; 54
 a26:	07 fe       	sbrs	r0, 7
 a28:	fd cf       	rjmp	.-6      	; 0xa24 <Twi_Start+0x4>
 a2a:	08 95       	ret

00000a2c <Twi_Stop>:
 a2c:	84 e9       	ldi	r24, 0x94	; 148
 a2e:	86 bf       	out	0x36, r24	; 54
 a30:	08 95       	ret

00000a32 <Twi_Write>:
 a32:	83 b9       	out	0x03, r24	; 3
 a34:	84 e8       	ldi	r24, 0x84	; 132
 a36:	86 bf       	out	0x36, r24	; 54
 a38:	06 b6       	in	r0, 0x36	; 54
 a3a:	07 fe       	sbrs	r0, 7
 a3c:	fd cf       	rjmp	.-6      	; 0xa38 <Twi_Write+0x6>
 a3e:	08 95       	ret

00000a40 <Twi_ReadWithNACK>:
 a40:	84 e8       	ldi	r24, 0x84	; 132
 a42:	86 bf       	out	0x36, r24	; 54
 a44:	06 b6       	in	r0, 0x36	; 54
 a46:	07 fe       	sbrs	r0, 7
 a48:	fd cf       	rjmp	.-6      	; 0xa44 <Twi_ReadWithNACK+0x4>
 a4a:	83 b1       	in	r24, 0x03	; 3
 a4c:	08 95       	ret

00000a4e <Twi_StatusGet>:
 a4e:	81 b1       	in	r24, 0x01	; 1
 a50:	88 7f       	andi	r24, 0xF8	; 248
 a52:	08 95       	ret

00000a54 <__subsf3>:
 a54:	50 58       	subi	r21, 0x80	; 128

00000a56 <__addsf3>:
 a56:	bb 27       	eor	r27, r27
 a58:	aa 27       	eor	r26, r26
 a5a:	0e 94 42 05 	call	0xa84	; 0xa84 <__addsf3x>
 a5e:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
 a62:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
 a66:	38 f0       	brcs	.+14     	; 0xa76 <__addsf3+0x20>
 a68:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
 a6c:	20 f0       	brcs	.+8      	; 0xa76 <__addsf3+0x20>
 a6e:	39 f4       	brne	.+14     	; 0xa7e <__addsf3+0x28>
 a70:	9f 3f       	cpi	r25, 0xFF	; 255
 a72:	19 f4       	brne	.+6      	; 0xa7a <__addsf3+0x24>
 a74:	26 f4       	brtc	.+8      	; 0xa7e <__addsf3+0x28>
 a76:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
 a7a:	0e f4       	brtc	.+2      	; 0xa7e <__addsf3+0x28>
 a7c:	e0 95       	com	r30
 a7e:	e7 fb       	bst	r30, 7
 a80:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>

00000a84 <__addsf3x>:
 a84:	e9 2f       	mov	r30, r25
 a86:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
 a8a:	58 f3       	brcs	.-42     	; 0xa62 <__addsf3+0xc>
 a8c:	ba 17       	cp	r27, r26
 a8e:	62 07       	cpc	r22, r18
 a90:	73 07       	cpc	r23, r19
 a92:	84 07       	cpc	r24, r20
 a94:	95 07       	cpc	r25, r21
 a96:	20 f0       	brcs	.+8      	; 0xaa0 <__addsf3x+0x1c>
 a98:	79 f4       	brne	.+30     	; 0xab8 <__addsf3x+0x34>
 a9a:	a6 f5       	brtc	.+104    	; 0xb04 <__addsf3x+0x80>
 a9c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
 aa0:	0e f4       	brtc	.+2      	; 0xaa4 <__addsf3x+0x20>
 aa2:	e0 95       	com	r30
 aa4:	0b 2e       	mov	r0, r27
 aa6:	ba 2f       	mov	r27, r26
 aa8:	a0 2d       	mov	r26, r0
 aaa:	0b 01       	movw	r0, r22
 aac:	b9 01       	movw	r22, r18
 aae:	90 01       	movw	r18, r0
 ab0:	0c 01       	movw	r0, r24
 ab2:	ca 01       	movw	r24, r20
 ab4:	a0 01       	movw	r20, r0
 ab6:	11 24       	eor	r1, r1
 ab8:	ff 27       	eor	r31, r31
 aba:	59 1b       	sub	r21, r25
 abc:	99 f0       	breq	.+38     	; 0xae4 <__addsf3x+0x60>
 abe:	59 3f       	cpi	r21, 0xF9	; 249
 ac0:	50 f4       	brcc	.+20     	; 0xad6 <__addsf3x+0x52>
 ac2:	50 3e       	cpi	r21, 0xE0	; 224
 ac4:	68 f1       	brcs	.+90     	; 0xb20 <__addsf3x+0x9c>
 ac6:	1a 16       	cp	r1, r26
 ac8:	f0 40       	sbci	r31, 0x00	; 0
 aca:	a2 2f       	mov	r26, r18
 acc:	23 2f       	mov	r18, r19
 ace:	34 2f       	mov	r19, r20
 ad0:	44 27       	eor	r20, r20
 ad2:	58 5f       	subi	r21, 0xF8	; 248
 ad4:	f3 cf       	rjmp	.-26     	; 0xabc <__addsf3x+0x38>
 ad6:	46 95       	lsr	r20
 ad8:	37 95       	ror	r19
 ada:	27 95       	ror	r18
 adc:	a7 95       	ror	r26
 ade:	f0 40       	sbci	r31, 0x00	; 0
 ae0:	53 95       	inc	r21
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <__addsf3x+0x52>
 ae4:	7e f4       	brtc	.+30     	; 0xb04 <__addsf3x+0x80>
 ae6:	1f 16       	cp	r1, r31
 ae8:	ba 0b       	sbc	r27, r26
 aea:	62 0b       	sbc	r22, r18
 aec:	73 0b       	sbc	r23, r19
 aee:	84 0b       	sbc	r24, r20
 af0:	ba f0       	brmi	.+46     	; 0xb20 <__addsf3x+0x9c>
 af2:	91 50       	subi	r25, 0x01	; 1
 af4:	a1 f0       	breq	.+40     	; 0xb1e <__addsf3x+0x9a>
 af6:	ff 0f       	add	r31, r31
 af8:	bb 1f       	adc	r27, r27
 afa:	66 1f       	adc	r22, r22
 afc:	77 1f       	adc	r23, r23
 afe:	88 1f       	adc	r24, r24
 b00:	c2 f7       	brpl	.-16     	; 0xaf2 <__addsf3x+0x6e>
 b02:	0e c0       	rjmp	.+28     	; 0xb20 <__addsf3x+0x9c>
 b04:	ba 0f       	add	r27, r26
 b06:	62 1f       	adc	r22, r18
 b08:	73 1f       	adc	r23, r19
 b0a:	84 1f       	adc	r24, r20
 b0c:	48 f4       	brcc	.+18     	; 0xb20 <__addsf3x+0x9c>
 b0e:	87 95       	ror	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	b7 95       	ror	r27
 b16:	f7 95       	ror	r31
 b18:	9e 3f       	cpi	r25, 0xFE	; 254
 b1a:	08 f0       	brcs	.+2      	; 0xb1e <__addsf3x+0x9a>
 b1c:	b0 cf       	rjmp	.-160    	; 0xa7e <__addsf3+0x28>
 b1e:	93 95       	inc	r25
 b20:	88 0f       	add	r24, r24
 b22:	08 f0       	brcs	.+2      	; 0xb26 <__addsf3x+0xa2>
 b24:	99 27       	eor	r25, r25
 b26:	ee 0f       	add	r30, r30
 b28:	97 95       	ror	r25
 b2a:	87 95       	ror	r24
 b2c:	08 95       	ret

00000b2e <__divsf3>:
 b2e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3x>
 b32:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
 b36:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
 b3a:	58 f0       	brcs	.+22     	; 0xb52 <__divsf3+0x24>
 b3c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
 b40:	40 f0       	brcs	.+16     	; 0xb52 <__divsf3+0x24>
 b42:	29 f4       	brne	.+10     	; 0xb4e <__divsf3+0x20>
 b44:	5f 3f       	cpi	r21, 0xFF	; 255
 b46:	29 f0       	breq	.+10     	; 0xb52 <__divsf3+0x24>
 b48:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
 b4c:	51 11       	cpse	r21, r1
 b4e:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
 b52:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>

00000b56 <__divsf3x>:
 b56:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
 b5a:	68 f3       	brcs	.-38     	; 0xb36 <__divsf3+0x8>

00000b5c <__divsf3_pse>:
 b5c:	99 23       	and	r25, r25
 b5e:	b1 f3       	breq	.-20     	; 0xb4c <__divsf3+0x1e>
 b60:	55 23       	and	r21, r21
 b62:	91 f3       	breq	.-28     	; 0xb48 <__divsf3+0x1a>
 b64:	95 1b       	sub	r25, r21
 b66:	55 0b       	sbc	r21, r21
 b68:	bb 27       	eor	r27, r27
 b6a:	aa 27       	eor	r26, r26
 b6c:	62 17       	cp	r22, r18
 b6e:	73 07       	cpc	r23, r19
 b70:	84 07       	cpc	r24, r20
 b72:	38 f0       	brcs	.+14     	; 0xb82 <__divsf3_pse+0x26>
 b74:	9f 5f       	subi	r25, 0xFF	; 255
 b76:	5f 4f       	sbci	r21, 0xFF	; 255
 b78:	22 0f       	add	r18, r18
 b7a:	33 1f       	adc	r19, r19
 b7c:	44 1f       	adc	r20, r20
 b7e:	aa 1f       	adc	r26, r26
 b80:	a9 f3       	breq	.-22     	; 0xb6c <__divsf3_pse+0x10>
 b82:	35 d0       	rcall	.+106    	; 0xbee <__divsf3_pse+0x92>
 b84:	0e 2e       	mov	r0, r30
 b86:	3a f0       	brmi	.+14     	; 0xb96 <__divsf3_pse+0x3a>
 b88:	e0 e8       	ldi	r30, 0x80	; 128
 b8a:	32 d0       	rcall	.+100    	; 0xbf0 <__divsf3_pse+0x94>
 b8c:	91 50       	subi	r25, 0x01	; 1
 b8e:	50 40       	sbci	r21, 0x00	; 0
 b90:	e6 95       	lsr	r30
 b92:	00 1c       	adc	r0, r0
 b94:	ca f7       	brpl	.-14     	; 0xb88 <__divsf3_pse+0x2c>
 b96:	2b d0       	rcall	.+86     	; 0xbee <__divsf3_pse+0x92>
 b98:	fe 2f       	mov	r31, r30
 b9a:	29 d0       	rcall	.+82     	; 0xbee <__divsf3_pse+0x92>
 b9c:	66 0f       	add	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	bb 1f       	adc	r27, r27
 ba4:	26 17       	cp	r18, r22
 ba6:	37 07       	cpc	r19, r23
 ba8:	48 07       	cpc	r20, r24
 baa:	ab 07       	cpc	r26, r27
 bac:	b0 e8       	ldi	r27, 0x80	; 128
 bae:	09 f0       	breq	.+2      	; 0xbb2 <__divsf3_pse+0x56>
 bb0:	bb 0b       	sbc	r27, r27
 bb2:	80 2d       	mov	r24, r0
 bb4:	bf 01       	movw	r22, r30
 bb6:	ff 27       	eor	r31, r31
 bb8:	93 58       	subi	r25, 0x83	; 131
 bba:	5f 4f       	sbci	r21, 0xFF	; 255
 bbc:	3a f0       	brmi	.+14     	; 0xbcc <__divsf3_pse+0x70>
 bbe:	9e 3f       	cpi	r25, 0xFE	; 254
 bc0:	51 05       	cpc	r21, r1
 bc2:	78 f0       	brcs	.+30     	; 0xbe2 <__divsf3_pse+0x86>
 bc4:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
 bc8:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
 bcc:	5f 3f       	cpi	r21, 0xFF	; 255
 bce:	e4 f3       	brlt	.-8      	; 0xbc8 <__divsf3_pse+0x6c>
 bd0:	98 3e       	cpi	r25, 0xE8	; 232
 bd2:	d4 f3       	brlt	.-12     	; 0xbc8 <__divsf3_pse+0x6c>
 bd4:	86 95       	lsr	r24
 bd6:	77 95       	ror	r23
 bd8:	67 95       	ror	r22
 bda:	b7 95       	ror	r27
 bdc:	f7 95       	ror	r31
 bde:	9f 5f       	subi	r25, 0xFF	; 255
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__divsf3_pse+0x78>
 be2:	88 0f       	add	r24, r24
 be4:	91 1d       	adc	r25, r1
 be6:	96 95       	lsr	r25
 be8:	87 95       	ror	r24
 bea:	97 f9       	bld	r25, 7
 bec:	08 95       	ret
 bee:	e1 e0       	ldi	r30, 0x01	; 1
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	bb 1f       	adc	r27, r27
 bf8:	62 17       	cp	r22, r18
 bfa:	73 07       	cpc	r23, r19
 bfc:	84 07       	cpc	r24, r20
 bfe:	ba 07       	cpc	r27, r26
 c00:	20 f0       	brcs	.+8      	; 0xc0a <__divsf3_pse+0xae>
 c02:	62 1b       	sub	r22, r18
 c04:	73 0b       	sbc	r23, r19
 c06:	84 0b       	sbc	r24, r20
 c08:	ba 0b       	sbc	r27, r26
 c0a:	ee 1f       	adc	r30, r30
 c0c:	88 f7       	brcc	.-30     	; 0xbf0 <__divsf3_pse+0x94>
 c0e:	e0 95       	com	r30
 c10:	08 95       	ret

00000c12 <__fixunssfsi>:
 c12:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_splitA>
 c16:	88 f0       	brcs	.+34     	; 0xc3a <__fixunssfsi+0x28>
 c18:	9f 57       	subi	r25, 0x7F	; 127
 c1a:	98 f0       	brcs	.+38     	; 0xc42 <__fixunssfsi+0x30>
 c1c:	b9 2f       	mov	r27, r25
 c1e:	99 27       	eor	r25, r25
 c20:	b7 51       	subi	r27, 0x17	; 23
 c22:	b0 f0       	brcs	.+44     	; 0xc50 <__fixunssfsi+0x3e>
 c24:	e1 f0       	breq	.+56     	; 0xc5e <__fixunssfsi+0x4c>
 c26:	66 0f       	add	r22, r22
 c28:	77 1f       	adc	r23, r23
 c2a:	88 1f       	adc	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	1a f0       	brmi	.+6      	; 0xc36 <__fixunssfsi+0x24>
 c30:	ba 95       	dec	r27
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__fixunssfsi+0x14>
 c34:	14 c0       	rjmp	.+40     	; 0xc5e <__fixunssfsi+0x4c>
 c36:	b1 30       	cpi	r27, 0x01	; 1
 c38:	91 f0       	breq	.+36     	; 0xc5e <__fixunssfsi+0x4c>
 c3a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_zero>
 c3e:	b1 e0       	ldi	r27, 0x01	; 1
 c40:	08 95       	ret
 c42:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
 c46:	67 2f       	mov	r22, r23
 c48:	78 2f       	mov	r23, r24
 c4a:	88 27       	eor	r24, r24
 c4c:	b8 5f       	subi	r27, 0xF8	; 248
 c4e:	39 f0       	breq	.+14     	; 0xc5e <__fixunssfsi+0x4c>
 c50:	b9 3f       	cpi	r27, 0xF9	; 249
 c52:	cc f3       	brlt	.-14     	; 0xc46 <__fixunssfsi+0x34>
 c54:	86 95       	lsr	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b3 95       	inc	r27
 c5c:	d9 f7       	brne	.-10     	; 0xc54 <__fixunssfsi+0x42>
 c5e:	3e f4       	brtc	.+14     	; 0xc6e <__fixunssfsi+0x5c>
 c60:	90 95       	com	r25
 c62:	80 95       	com	r24
 c64:	70 95       	com	r23
 c66:	61 95       	neg	r22
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	8f 4f       	sbci	r24, 0xFF	; 255
 c6c:	9f 4f       	sbci	r25, 0xFF	; 255
 c6e:	08 95       	ret

00000c70 <__floatunsisf>:
 c70:	e8 94       	clt
 c72:	09 c0       	rjmp	.+18     	; 0xc86 <__floatsisf+0x12>

00000c74 <__floatsisf>:
 c74:	97 fb       	bst	r25, 7
 c76:	3e f4       	brtc	.+14     	; 0xc86 <__floatsisf+0x12>
 c78:	90 95       	com	r25
 c7a:	80 95       	com	r24
 c7c:	70 95       	com	r23
 c7e:	61 95       	neg	r22
 c80:	7f 4f       	sbci	r23, 0xFF	; 255
 c82:	8f 4f       	sbci	r24, 0xFF	; 255
 c84:	9f 4f       	sbci	r25, 0xFF	; 255
 c86:	99 23       	and	r25, r25
 c88:	a9 f0       	breq	.+42     	; 0xcb4 <__floatsisf+0x40>
 c8a:	f9 2f       	mov	r31, r25
 c8c:	96 e9       	ldi	r25, 0x96	; 150
 c8e:	bb 27       	eor	r27, r27
 c90:	93 95       	inc	r25
 c92:	f6 95       	lsr	r31
 c94:	87 95       	ror	r24
 c96:	77 95       	ror	r23
 c98:	67 95       	ror	r22
 c9a:	b7 95       	ror	r27
 c9c:	f1 11       	cpse	r31, r1
 c9e:	f8 cf       	rjmp	.-16     	; 0xc90 <__floatsisf+0x1c>
 ca0:	fa f4       	brpl	.+62     	; 0xce0 <__floatsisf+0x6c>
 ca2:	bb 0f       	add	r27, r27
 ca4:	11 f4       	brne	.+4      	; 0xcaa <__floatsisf+0x36>
 ca6:	60 ff       	sbrs	r22, 0
 ca8:	1b c0       	rjmp	.+54     	; 0xce0 <__floatsisf+0x6c>
 caa:	6f 5f       	subi	r22, 0xFF	; 255
 cac:	7f 4f       	sbci	r23, 0xFF	; 255
 cae:	8f 4f       	sbci	r24, 0xFF	; 255
 cb0:	9f 4f       	sbci	r25, 0xFF	; 255
 cb2:	16 c0       	rjmp	.+44     	; 0xce0 <__floatsisf+0x6c>
 cb4:	88 23       	and	r24, r24
 cb6:	11 f0       	breq	.+4      	; 0xcbc <__floatsisf+0x48>
 cb8:	96 e9       	ldi	r25, 0x96	; 150
 cba:	11 c0       	rjmp	.+34     	; 0xcde <__floatsisf+0x6a>
 cbc:	77 23       	and	r23, r23
 cbe:	21 f0       	breq	.+8      	; 0xcc8 <__floatsisf+0x54>
 cc0:	9e e8       	ldi	r25, 0x8E	; 142
 cc2:	87 2f       	mov	r24, r23
 cc4:	76 2f       	mov	r23, r22
 cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <__floatsisf+0x5e>
 cc8:	66 23       	and	r22, r22
 cca:	71 f0       	breq	.+28     	; 0xce8 <__floatsisf+0x74>
 ccc:	96 e8       	ldi	r25, 0x86	; 134
 cce:	86 2f       	mov	r24, r22
 cd0:	70 e0       	ldi	r23, 0x00	; 0
 cd2:	60 e0       	ldi	r22, 0x00	; 0
 cd4:	2a f0       	brmi	.+10     	; 0xce0 <__floatsisf+0x6c>
 cd6:	9a 95       	dec	r25
 cd8:	66 0f       	add	r22, r22
 cda:	77 1f       	adc	r23, r23
 cdc:	88 1f       	adc	r24, r24
 cde:	da f7       	brpl	.-10     	; 0xcd6 <__floatsisf+0x62>
 ce0:	88 0f       	add	r24, r24
 ce2:	96 95       	lsr	r25
 ce4:	87 95       	ror	r24
 ce6:	97 f9       	bld	r25, 7
 ce8:	08 95       	ret

00000cea <__fp_inf>:
 cea:	97 f9       	bld	r25, 7
 cec:	9f 67       	ori	r25, 0x7F	; 127
 cee:	80 e8       	ldi	r24, 0x80	; 128
 cf0:	70 e0       	ldi	r23, 0x00	; 0
 cf2:	60 e0       	ldi	r22, 0x00	; 0
 cf4:	08 95       	ret

00000cf6 <__fp_nan>:
 cf6:	9f ef       	ldi	r25, 0xFF	; 255
 cf8:	80 ec       	ldi	r24, 0xC0	; 192
 cfa:	08 95       	ret

00000cfc <__fp_pscA>:
 cfc:	00 24       	eor	r0, r0
 cfe:	0a 94       	dec	r0
 d00:	16 16       	cp	r1, r22
 d02:	17 06       	cpc	r1, r23
 d04:	18 06       	cpc	r1, r24
 d06:	09 06       	cpc	r0, r25
 d08:	08 95       	ret

00000d0a <__fp_pscB>:
 d0a:	00 24       	eor	r0, r0
 d0c:	0a 94       	dec	r0
 d0e:	12 16       	cp	r1, r18
 d10:	13 06       	cpc	r1, r19
 d12:	14 06       	cpc	r1, r20
 d14:	05 06       	cpc	r0, r21
 d16:	08 95       	ret

00000d18 <__fp_round>:
 d18:	09 2e       	mov	r0, r25
 d1a:	03 94       	inc	r0
 d1c:	00 0c       	add	r0, r0
 d1e:	11 f4       	brne	.+4      	; 0xd24 <__fp_round+0xc>
 d20:	88 23       	and	r24, r24
 d22:	52 f0       	brmi	.+20     	; 0xd38 <__fp_round+0x20>
 d24:	bb 0f       	add	r27, r27
 d26:	40 f4       	brcc	.+16     	; 0xd38 <__fp_round+0x20>
 d28:	bf 2b       	or	r27, r31
 d2a:	11 f4       	brne	.+4      	; 0xd30 <__fp_round+0x18>
 d2c:	60 ff       	sbrs	r22, 0
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__fp_round+0x20>
 d30:	6f 5f       	subi	r22, 0xFF	; 255
 d32:	7f 4f       	sbci	r23, 0xFF	; 255
 d34:	8f 4f       	sbci	r24, 0xFF	; 255
 d36:	9f 4f       	sbci	r25, 0xFF	; 255
 d38:	08 95       	ret

00000d3a <__fp_split3>:
 d3a:	57 fd       	sbrc	r21, 7
 d3c:	90 58       	subi	r25, 0x80	; 128
 d3e:	44 0f       	add	r20, r20
 d40:	55 1f       	adc	r21, r21
 d42:	59 f0       	breq	.+22     	; 0xd5a <__fp_splitA+0x10>
 d44:	5f 3f       	cpi	r21, 0xFF	; 255
 d46:	71 f0       	breq	.+28     	; 0xd64 <__fp_splitA+0x1a>
 d48:	47 95       	ror	r20

00000d4a <__fp_splitA>:
 d4a:	88 0f       	add	r24, r24
 d4c:	97 fb       	bst	r25, 7
 d4e:	99 1f       	adc	r25, r25
 d50:	61 f0       	breq	.+24     	; 0xd6a <__fp_splitA+0x20>
 d52:	9f 3f       	cpi	r25, 0xFF	; 255
 d54:	79 f0       	breq	.+30     	; 0xd74 <__fp_splitA+0x2a>
 d56:	87 95       	ror	r24
 d58:	08 95       	ret
 d5a:	12 16       	cp	r1, r18
 d5c:	13 06       	cpc	r1, r19
 d5e:	14 06       	cpc	r1, r20
 d60:	55 1f       	adc	r21, r21
 d62:	f2 cf       	rjmp	.-28     	; 0xd48 <__fp_split3+0xe>
 d64:	46 95       	lsr	r20
 d66:	f1 df       	rcall	.-30     	; 0xd4a <__fp_splitA>
 d68:	08 c0       	rjmp	.+16     	; 0xd7a <__fp_splitA+0x30>
 d6a:	16 16       	cp	r1, r22
 d6c:	17 06       	cpc	r1, r23
 d6e:	18 06       	cpc	r1, r24
 d70:	99 1f       	adc	r25, r25
 d72:	f1 cf       	rjmp	.-30     	; 0xd56 <__fp_splitA+0xc>
 d74:	86 95       	lsr	r24
 d76:	71 05       	cpc	r23, r1
 d78:	61 05       	cpc	r22, r1
 d7a:	08 94       	sec
 d7c:	08 95       	ret

00000d7e <__fp_zero>:
 d7e:	e8 94       	clt

00000d80 <__fp_szero>:
 d80:	bb 27       	eor	r27, r27
 d82:	66 27       	eor	r22, r22
 d84:	77 27       	eor	r23, r23
 d86:	cb 01       	movw	r24, r22
 d88:	97 f9       	bld	r25, 7
 d8a:	08 95       	ret

00000d8c <__mulsf3>:
 d8c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__mulsf3x>
 d90:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
 d94:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
 d98:	38 f0       	brcs	.+14     	; 0xda8 <__mulsf3+0x1c>
 d9a:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
 d9e:	20 f0       	brcs	.+8      	; 0xda8 <__mulsf3+0x1c>
 da0:	95 23       	and	r25, r21
 da2:	11 f0       	breq	.+4      	; 0xda8 <__mulsf3+0x1c>
 da4:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
 da8:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
 dac:	11 24       	eor	r1, r1
 dae:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>

00000db2 <__mulsf3x>:
 db2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
 db6:	70 f3       	brcs	.-36     	; 0xd94 <__mulsf3+0x8>

00000db8 <__mulsf3_pse>:
 db8:	95 9f       	mul	r25, r21
 dba:	c1 f3       	breq	.-16     	; 0xdac <__mulsf3+0x20>
 dbc:	95 0f       	add	r25, r21
 dbe:	50 e0       	ldi	r21, 0x00	; 0
 dc0:	55 1f       	adc	r21, r21
 dc2:	62 9f       	mul	r22, r18
 dc4:	f0 01       	movw	r30, r0
 dc6:	72 9f       	mul	r23, r18
 dc8:	bb 27       	eor	r27, r27
 dca:	f0 0d       	add	r31, r0
 dcc:	b1 1d       	adc	r27, r1
 dce:	63 9f       	mul	r22, r19
 dd0:	aa 27       	eor	r26, r26
 dd2:	f0 0d       	add	r31, r0
 dd4:	b1 1d       	adc	r27, r1
 dd6:	aa 1f       	adc	r26, r26
 dd8:	64 9f       	mul	r22, r20
 dda:	66 27       	eor	r22, r22
 ddc:	b0 0d       	add	r27, r0
 dde:	a1 1d       	adc	r26, r1
 de0:	66 1f       	adc	r22, r22
 de2:	82 9f       	mul	r24, r18
 de4:	22 27       	eor	r18, r18
 de6:	b0 0d       	add	r27, r0
 de8:	a1 1d       	adc	r26, r1
 dea:	62 1f       	adc	r22, r18
 dec:	73 9f       	mul	r23, r19
 dee:	b0 0d       	add	r27, r0
 df0:	a1 1d       	adc	r26, r1
 df2:	62 1f       	adc	r22, r18
 df4:	83 9f       	mul	r24, r19
 df6:	a0 0d       	add	r26, r0
 df8:	61 1d       	adc	r22, r1
 dfa:	22 1f       	adc	r18, r18
 dfc:	74 9f       	mul	r23, r20
 dfe:	33 27       	eor	r19, r19
 e00:	a0 0d       	add	r26, r0
 e02:	61 1d       	adc	r22, r1
 e04:	23 1f       	adc	r18, r19
 e06:	84 9f       	mul	r24, r20
 e08:	60 0d       	add	r22, r0
 e0a:	21 1d       	adc	r18, r1
 e0c:	82 2f       	mov	r24, r18
 e0e:	76 2f       	mov	r23, r22
 e10:	6a 2f       	mov	r22, r26
 e12:	11 24       	eor	r1, r1
 e14:	9f 57       	subi	r25, 0x7F	; 127
 e16:	50 40       	sbci	r21, 0x00	; 0
 e18:	9a f0       	brmi	.+38     	; 0xe40 <__mulsf3_pse+0x88>
 e1a:	f1 f0       	breq	.+60     	; 0xe58 <__mulsf3_pse+0xa0>
 e1c:	88 23       	and	r24, r24
 e1e:	4a f0       	brmi	.+18     	; 0xe32 <__mulsf3_pse+0x7a>
 e20:	ee 0f       	add	r30, r30
 e22:	ff 1f       	adc	r31, r31
 e24:	bb 1f       	adc	r27, r27
 e26:	66 1f       	adc	r22, r22
 e28:	77 1f       	adc	r23, r23
 e2a:	88 1f       	adc	r24, r24
 e2c:	91 50       	subi	r25, 0x01	; 1
 e2e:	50 40       	sbci	r21, 0x00	; 0
 e30:	a9 f7       	brne	.-22     	; 0xe1c <__mulsf3_pse+0x64>
 e32:	9e 3f       	cpi	r25, 0xFE	; 254
 e34:	51 05       	cpc	r21, r1
 e36:	80 f0       	brcs	.+32     	; 0xe58 <__mulsf3_pse+0xa0>
 e38:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
 e3c:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
 e40:	5f 3f       	cpi	r21, 0xFF	; 255
 e42:	e4 f3       	brlt	.-8      	; 0xe3c <__mulsf3_pse+0x84>
 e44:	98 3e       	cpi	r25, 0xE8	; 232
 e46:	d4 f3       	brlt	.-12     	; 0xe3c <__mulsf3_pse+0x84>
 e48:	86 95       	lsr	r24
 e4a:	77 95       	ror	r23
 e4c:	67 95       	ror	r22
 e4e:	b7 95       	ror	r27
 e50:	f7 95       	ror	r31
 e52:	e7 95       	ror	r30
 e54:	9f 5f       	subi	r25, 0xFF	; 255
 e56:	c1 f7       	brne	.-16     	; 0xe48 <__mulsf3_pse+0x90>
 e58:	fe 2b       	or	r31, r30
 e5a:	88 0f       	add	r24, r24
 e5c:	91 1d       	adc	r25, r1
 e5e:	96 95       	lsr	r25
 e60:	87 95       	ror	r24
 e62:	97 f9       	bld	r25, 7
 e64:	08 95       	ret

00000e66 <__umulhisi3>:
 e66:	a2 9f       	mul	r26, r18
 e68:	b0 01       	movw	r22, r0
 e6a:	b3 9f       	mul	r27, r19
 e6c:	c0 01       	movw	r24, r0
 e6e:	a3 9f       	mul	r26, r19
 e70:	70 0d       	add	r23, r0
 e72:	81 1d       	adc	r24, r1
 e74:	11 24       	eor	r1, r1
 e76:	91 1d       	adc	r25, r1
 e78:	b2 9f       	mul	r27, r18
 e7a:	70 0d       	add	r23, r0
 e7c:	81 1d       	adc	r24, r1
 e7e:	11 24       	eor	r1, r1
 e80:	91 1d       	adc	r25, r1
 e82:	08 95       	ret

00000e84 <_exit>:
 e84:	f8 94       	cli

00000e86 <__stop_program>:
 e86:	ff cf       	rjmp	.-2      	; 0xe86 <__stop_program>
